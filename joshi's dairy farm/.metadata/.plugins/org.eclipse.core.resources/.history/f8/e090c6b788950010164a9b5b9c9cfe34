package com.joshisFarm.notification_service.service;

import java.time.LocalDateTime;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import com.joshisFarm.notification_service.dto.NotificationDTO;
import com.joshisFarm.notification_service.entity.Notification;
import com.joshisFarm.notification_service.repository.NotificationRepository;

import lombok.RequiredArgsConstructor;

@Service @RequiredArgsConstructor
public class NotificationService {

    private final NotificationRepository repo;

    public NotificationDTO sendNotification(NotificationDTO dto) {
        // Save in DB
        Notification n = repo.save(
                Notification.builder()
                        .type(dto.getType())
                        .recipient(dto.getRecipient())
                        .message(dto.getMessage())
                        .createdAt(LocalDateTime.now())
                        .sent(false) // mark later after success
                        .build()
        );

        // TODO: send email if type = EMAIL (SMTP logic in MailConfig)
        // For now, just log
        System.out.println("Sending " + dto.getType() + " notification to " + dto.getRecipient());

        n.setSent(true);
        repo.save(n);

        return dto;
    }

    public List<NotificationDTO> getAllNotifications() {
        return repo.findAll().stream()
                .map(n -> new NotificationDTO(n.getType(), n.getRecipient(), n.getMessage()))
                .collect(Collectors.toList());
    }
}
